;(function(e,t,n){function i(n,s){if(!t[n]){if(!e[n]){var o=typeof require=="function"&&require;if(!s&&o)return o(n,!0);if(r)return r(n,!0);throw new Error("Cannot find module '"+n+"'")}var u=t[n]={exports:{}};e[n][0](function(t){var r=e[n][1][t];return i(r?r:t)},u,u.exports)}return t[n].exports}var r=typeof require=="function"&&require;for(var s=0;s<n.length;s++)i(n[s]);return i})({1:[function(require,module,exports){
// domready
$( document ).ready(function(){
    // Observable = require('./helper').Observable.call(); // event systsem

    var navbars = require('./components/navbars');
    var albumComponent = require('./components/album');
    var settings = require('./settings'); // load settings
    // var ss = {
    //     view: function(){
    //         return m('rr',{config:function(el,isInit,context){
    //             console.log('rr,', el,isInit,context)
    //         }})
    //     }
    // }
    // m.mount(document.getElementsByTagName('header')[0],ss);
    // m.computati start
    var router = require('./router');
    m.mount(document.getElementsByTagName('header')[0], navbars);

    // m.mount($('footer')[0],albumComponent);


});

},{"./components/navbars":2,"./components/album":3,"./settings":4,"./router":5}],2:[function(require,module,exports){
// Header component
var sideLinks = [
    {title: "Home", url: "#/"},
    {title: "Albums", url: "#/albums"},
    {title: "Documentation", url: "#/doc"},
    {title: "About", url: "#/about"},
    {title: "gett2", url: "#/album/2"},
];
// m("li", {class: selected ? "active" : ""})
module.exports = {
    controller: function() {
        m.redraw.strategy("diff");
    },
    view: function(ctrl) {
        // console.log('dont')
        // m.redraw.strategy("none");
        return m('nav', {config: navConf}, m('.nav-wrapper', [
            m('a', { href: '#!', class: 'brand-logo center' }, 'logo'),

            m('a', { href: '#', class: 'button-collapse', 'data-activates': 'mobile-demo' }, m('i', { class: 'material-icon' }, 'menu') ),

            m('ul', { class: 'right hide-on-med-and-down'}, [
                m('li', m('a',{ href: '#/tobe' }) )
            ]),

            m('ul#mobile-demo', { class: 'side-nav fixed'},[
                sideLinks.map(function(link) {
                    return m('li', m('a', {href: link.url}, link.title));
                })
            ])
        ]));
    }
}

var navConf = function(element, isInitialized, context) {
    if (!isInitialized) {
        $('.button-collapse').sideNav({
            'edge': 'left',
            // closeOnClick: true
        });
    }


};

},{}],4:[function(require,module,exports){
module.exports = {
    appId: "",
    pageId: "",

    adminUid: "",

    url: "http://test.com",

    loginRedirectRoute: "/fbLogin"
};

},{}],5:[function(require,module,exports){
var splashPage = require('./pages/splash');
var albumsPage = require('./pages/albums');

var settings = require('./settings');


// hack for fb Redirect urls
// checks if url is a fb redirect url
// if not return
// if fb url found convert to hash route url
function checkForFbRedirectUrl(location){
    var hash = location.hash;
    var currSite = location.origin;

    var isFbUrl = location.href.indexOf(currSite + '/?#') == 0; // if this is the first substring in the url

    // console.log(isFbUrl,currSite,hash)

    if(!isFbUrl) return;

    if(hash[0] == "#") hash = hash.substr(1); // remove first hash

    var hashArr = hash.split('&');

    // split hash to array of objects
    hashArr = hashArr.map(function(hashItem){
        var itemSplit = hashItem.split('=');
        return {
            key: itemSplit[0],
            value: itemSplit[1]
        }
    });

    // console.log(hashArr);

    // generate output url
    var URL = currSite + '/#'; // hash for hash routing
    URL += settings.loginRedirectRoute;

    hashArr.forEach(function(item){
        var urlParam = '/' + item.key + '/' + item.value;
        URL += urlParam;
    });


    return URL;
}

var parsedUrl = checkForFbRedirectUrl(window.location)
if (parsedUrl) return window.location.replace(parsedUrl); // if found change route


m.route.mode = "hash";
m.route( $('main')[0], '/', {
    // fb routes
    '/fbLogin/access_token/:accToken/expires_in/:exp/code/:code' : splashPage,
    // error route
    '/fbLogin/error_reason/:errorReason/error/:error/error_description/:errorDesc' : splashPage,


    '/' : splashPage,


    '/albums' : albumsPage,
    '/album/:id' : albumsPage,
    // '/about': function(){}
});


// another router for footer

},{"./pages/splash":6,"./pages/albums":7,"./settings":4}],3:[function(require,module,exports){
var progressLoader = require('../components/progressLoader');
var Models = require('../models');
var Albums = Models.Albums;

module.exports = {
    //the Todo class has two properties

    controller: function(args) {
        args = args || {};

        var album = {
            id: args.id, // static
            name: m.prop(''),
            photos: m.prop([])
        };

        // ctrl.modalOpen = m.prop(false);
        var error = m.prop('');

        // m.redraw.strategy("none");

        var openAlbum = function(id){
            Albums.get(id)
            .then(function(iAlbum){

                album.name(iAlbum.name);
                return iAlbum.photos
            }).then(album.photos)//  set as img
            .then(function(photos){

                console.log(photos)
                if(!photos.length)
                    error( 'No photos were found');
                console.log('leng',photos.length);
                console.log('redraw')

            }).then(m.redraw);
        }

        openAlbum(album.id);

        return {
            album: album,

            error: error
        }

    },
    view: function(ctrl,args) {
        var album = ctrl.album;

        // loading
        console.log('state change',ctrl);
        return m('.album-modal', {class: "modal modal-fixed-footer", config:modalOpen}, [
            m('.modal-content',[
                m('h4', album.name()),
                function checkState(){
                    console.log('stt',ctrl.error())
                    if (ctrl.error()) return errorView(ctrl.error);
                    // photos component
                    else if (album.photos().length) return m.component( photosComponent, {photos: album.photos()} );
                    // animated progress icon
                    else return m.component( progressLoader, {id: 'album-load-progress'} );
                }(),
            ]),
            m('.modal-footer',[
                m('button',{class: "modal-action modal-close waves-effect waves-green btn-flat"}, "Agree")
            ])
        ]);
    }
};
//
var modalOpen = function(element, isInitialized, context) {
    if (!isInitialized) {
        $(element).openModal();
    }
};
var errorView = function(error){
    return m('h2', error)
}
// // seperate thumbTocomponent
var photosComponent = {
    controller: function (args) {
        args = args || {};
        var photos = m.prop(args.photos);

        return {
            photos: photos
        }
    },
    view: function(ctrl){
        var openLightboxPhoto = function(photo){
            console.log('open lightbox', photo);
        }
        // console.log('image view',images());
        // row col 3
        // each thumb - desc, like count, like btn
        // config to top fade in
        // config hide then fade in slow
        return m('.photos.row', [
            ctrl.photos().map(function(photo){
                return photoCard(openLightboxPhoto,photo)
            }),
        ]);
    }
}
// // row columns
var photoCard = function(onclick,photo){
    // console.log(photo)
    return ('.col.s12.m3.l3',[
        m('.card-image.waves-effect', {onclick: onclick.bind(onclick,photo)}, [
            m('img.responsive-img',{src: photo.thumbSrc, style: { width: '200px' }}),
            m('span.card-title',photo.description + ' Likes: ' + photo.like.count)
        ])
    ]);
}

},{"../components/progressLoader":8,"../models":9}],8:[function(require,module,exports){
var circle = m('.circle');
module.exports = {
    controller: function(args){
        // console.log(args)
        this.id = args.id || '';
        // var classes =
        // this.class = classes.join(' ')
        // ability to run function that sets class active
    },
    view: function(ctrl,args){
        return m('.preloader-wrapper', { id: ctrl.id, class: "big active" },[
            m('.spinner-layer.spinner-blue-only',[
                m('.circle-clipper.left',circle),
                m('.gap-patch',circle),
                m('.circle-clipper.right',circle)
            ])
        ]);
    }
}

},{}],9:[function(require,module,exports){
// api key
var settings = require('./settings');
var Storage = require('./helper').storage;
var accessToken = Storage('accessToken');

var graphApiBaseUrl = "https://graph.facebook.com/v2.5";
var graphPageUrl = graphApiBaseUrl + '/' + settings.pageId

module.exports = {

    Page: {
        getDetails: function(){
            var params = "?fields=description,name&access_token=" + accessToken();
            var url = graphPageUrl + params;

            return m.request({
                method: "GET",
                url: url,
                background: true, // dont affect rendering (Mithril)
                unwrapError: function(response) {
                    return response.error;
                }
            });
        },

        getVisitorsPosts: function(){

            var params = "/feed?fields=likes{name},story,message&access_token=" + accessToken();
            var url = graphPageUrl + params;

            // request gets page feed
            return m.request({
                method: "GET",
                url: url,
                background: true, // dont affect rendering (Mithril)
                unwrapError: function(response) {
                    return response.error;
                }
            }).then(function(d){
                return d.data;
            }).then(filterByNoStoryField)
            .then(filterByLikedUser.bind(null, settings.adminUid))
            .then(function(fin){
                console.log('visitors posts',fin)
            });

        }
    },
    // page Albums
    Albums: {
        list: function(){
            var params = "?fields=albums{location,name,likes,cover_photo}&access_token=" + accessToken();
            var url = graphPageUrl + params;

            return m.request({
                method: "GET",
                url: url,
                background: true, // dont affect rendering (Mithril)
                 // to json cast or not to cast
                unwrapError: function(response) {
                    return response.error;
                }
            }).then(function(d){
                return d.albums.data;
            })
            .then(filterByAulocation)
            .then(getCoverPhotos)
            .then(sortByLikesDesc)
            .then(formatEachAlbum);
            // .then(printEach)
        },

        get: function(id){
            var params = "?fields=photos{images,likes,name},name&access_token=" + accessToken();
            var url = graphApiBaseUrl + '/' + id + params;

            return m.request({
                method: "GET",
                url: url,
                background: true, // dont affect rendering (Mithril)
                 // to json cast or not to cast
                unwrapError: function(response) {
                    return response.error;
                }
            }).then(formatPhotos);
        }
    }
}

var getCoverSrc = function(coverId){
    var params = "?fields=source&access_token=" + accessToken();
    var url = graphApiBaseUrl + '/' + coverId + params;

    return m.request({
        method: "GET",
        url: url,
        background: true, // dont affect rendering (Mithril)
         // to json cast or not to cast
        unwrapError: function(response) {
            return response.error;
        }
    }).then(function(data){
        return data.source;
    })
}
function filterByAulocation(data){
    return data.filter(function(al){
        var loc = al.location || '';
        return loc.toLowerCase().indexOf('australia') >= 0;
    })
}
function getCoverPhotos(albums){
    albums = albums.map(function (album) {
        return getCoverSrc(album.cover_photo.id).then(function(coverSource){
            album.coverSource = coverSource;
            return album;
        });
    });
    return Promise.all(albums);
}
function sortByLikesDesc(data){
    return data.sort(function(a,b){
        var prevLikes = a.likes.data.length;
        var nextLikes = b.likes.data.length;
        return prevLikes < nextLikes;
    });
}

function printEach(data){
    return data.forEach(function(al){
        console.log(al)
    });
    // console.log(data)
}
function formatEachAlbum(data){
    return data.map(function(al){
        return {
            id: al.id,
            name: al.name,
            coverSource: al.coverSource,
            likes: al.likes.data
        }
    })
}

function getImageByHeightLargest(data){
    return data.sort(function(a,b){
        var prevHeight = a.height;
        var nextHeight = b.height;
        return prevHeight < nextHeight;
    })[0];
}
function getImageByHeight(images,height){
    return images.filter(function(image){
        return image.height == height;
    })[0] || images[images.length - 1];
}
function formatPhotos(data){
    data.photos = data.photos.data.map(function (photo) {

        return {
            id: photo.id,
            description: photo.name,
            thumbSrc: getImageByHeight(photo.images, 320).source,
            lgSrc: getImageByHeightLargest(photo.images).source,
            like: {
                count: photo.likes.data.length, // get num of likes
                users: photo.likes.data
            }
        };
    });
    return data;
}

function filterByNoStoryField(items){
    return items.filter(function(items){
        return !items.story;
    });
}

function filterByLikedUser(uId,items){
    return items.filter(function(item){
        var likes = item.likes || {data: []};

        return likes.data.filter(function(user){
            return user.id == uId;
        }).length;
    });
}

},{"./settings":4,"./helper":10}],6:[function(require,module,exports){
var fbLoginComponent = require('../components/fbLogin');

module.exports = {
    //the Todo class has two properties
    controller: function() {},
    view: function() {
        return m('div', {config: parallaxConf},[
            parallaxItem({src: "images/parallax1.jpg"}),
            centerParallaxItem(),
            parallaxItem({src: "images/parallax2.jpg"}),
        ]);
    }
};

var parallaxItem = function(img){
    return m('.parallax-container',[
        m('.parallax',[
            m('img', {src: img.src})
        ])
    ]);
}

var centerParallaxItem = function(){
    return m('#main-splash.section',[
        m('.row',[
            m('.col.offset-l1.l10.s12.white.z-depth-1', [
                m('article', [
                    m('col.l2.m4.s6', [
                        m('img.responsive-img', {src: "http://www.android-kiosk.com/wp-content/themes/MaterialPress-master/images/ic_launcher.png"})
                    ]),
                    m('.splash-content', [
                        m('.col.l10.m8.s12', [
                            fbLoginComponent,
                            m('h4.grey-text.darken-2.light','hehehe')
                        ]),
                        m('.col.l10.m8.s12', [
                            // m.trust('<h4 class="grey-text darken-2 light">Kiosk Browser Lockdown</h4>'),
                            // fbLoginComponent || 'ss'
                            // m.trust('<a class="btn-floating waves-effect waves-light btn-large red"><i class="material-icons">add</i></a>'),
                            // m.trust('<h5 class="grey-text darken-2 light">ProCo Apps</h5>'),
                            // m.trust('<p><a class="waves-effect waves-light btn light-green darken-1" href="https://play.google.com/store/apps/details?id=com.procoit.kioskbrowser" rel="noreferrer"><i class="mdi-av-play-shopping-bag left"></i>Download Free</a>&nbsp;<a class="waves-effect waves-light btn teal" href="https://sites.fastspring.com/androidkiosk/instant/kioskbrowserpro&amp;tags=kioskbrowser" rel="noreferrer"><i class="mdi-action-credit-card left"></i>Buy Pro £5.00*</a><br>'),
                            // m.trust('<span style="font-size: 0.5em;">*Plus tax where applicable</span></p>'),
                            // m.trust('<p class="grey-text darken-3">Kiosk Browser has been designed for use on any android device and is great for creating public kiosks, interactive digital signage etc…. It locks down the user interface so that the end-user isn’t able to adjust Android system settings or gain access to other applications.</p>'),
                            // m.trust('<p class="grey-text darken-3">We are always adding new features, if you need something specific for your project please get in touch.</p>'),
                            // m.trust('<p><a class="waves-effect waves-light btn light-blue darken-3" href="http://www.android-kiosk.com/screenshots" rel="noreferrer"><i class="mdi-image-photo-camera left"></i>Screenshots</a></p>')
                        ])
                    ])
                ])
            ])
        ])
    ]);
}

var parallaxConf = function(el, isInit, context) {
    if (!isInit) {
        $('.parallax').parallax();
    }
};

},{"../components/fbLogin":11}],7:[function(require,module,exports){
var progressLoader = require('../components/progressLoader');
var albumComponent = require('../components/album');
var Services = require('../services');
var Models = require('../models');
var Page = Models.Page;
var Albums = Models.Albums;

module.exports = {
    //     //the Todo class has two properties
    controller: function() {
        console.log('aaa')
        // var error = m.prop('');
        var page = m.prop({});
        var albums = m.prop([]);
        var visitorsPosts = m.prop([]);
        var albumOpen = m.prop(false);

        var onunload = function(){
            console.log('this unloaded');
        }

        var openAlbum = function(id){
            var route = '/album/' + id;

            var currRouteIsSame = m.route() == route;
            // console.log(route,m.route(),currRouteIsSame)

            if(currRouteIsSame){ // just moved in from route change
                albumOpen(true);
            }
            else m.route(route);
        }

        var currAlbumId = +m.route.param("id"); // convert to integer

        if(!isNaN(currAlbumId)){
            openAlbum(currAlbumId);
        }

        Services.FB.checkTokenValid().then(function(valid){
            if(!valid) return Promise.reject('Token Not Valid');

            return Promise.all([
                Page.getDetails(),
                Albums.list(),
                Page.getVisitorsPosts()
            ]);
        }).then(function(all){ // set valuse

            page(all[0]);
            albums(all[1]);
            visitorsPosts(all[2]);
        }).then(m.redraw,function(e){

            console.log('error Token Not Valid', e)
            // popup service
            // pop up 'invalid Login token' .. redirect home
            // return m.route('/')
        });
        // redraw stategy div
        return {
            page: page, // object
            albums: albums, // array
            albumOpen: albumOpen, // bool
            openAlbum: openAlbum, // function

            // error: error, // string
            onunload: onunload
        }

    },

    view: function(ctrl) {
        return m('.container', [
            !ctrl.albums().length ?  m.component( progressLoader, {id: 'page-load-progress'}) :
            m('.albums-view',[

                m('#album-head', [
                    albumsHead(ctrl.page)
                ]),
                m('#albums-content', [
                    m('h1', "Top Australia Destinations"),
                    m('.divider'),
                    m('.albums-items.row', [
                        ctrl.albums().map(function(album){
                            return albumsCard(ctrl.openAlbum,album)
                        }),
                    ])
                ]),
                ctrl.albumOpen() ? m.component(albumComponent, {id:m.route.param("id")}) : ''
            ])
        ]);
    }
};
var albumsHead = function(page){
    return [
        m('h1', page().name),
        m('p', page().description)
    ]
}

var albumsCard = function(onclick,album){
    return m('.col.s12.m6.l6',[
        m('.card-image.waves-effect',{onclick: onclick.bind(onclick,album.id)},[
            m('img.responsive-img',{src: album.coverSource, style: { height: '400px'}}),
            m('span.card-title',album.name + ' Likes: ' + album.likes.length)
        ])
    ]);
}

// var ctrlr = this;
// //a running list of todos
// ctrlr.list = new todo.TodoList();
//
// //a slot to store the name of a new todo before it is created
// ctrlr.description = m.prop('');
//
// //adds a todo to the list, and clears the description field for user convenience
// ctrlr.add = function(description) {
//     if (description()) {
//         ctrlr.list.push(new todo.Todo({description: description()}));
//         ctrlr.description("");
//     }
// };

//refactor the binding to a simple helper
// var binds = function(prop) {
//     return {oninput: m.withAttr("value", prop), value: prop()}
// }
//
// //a data store
// var name = m.prop("")
//
// //binding the data store in a view
// m("input", binds(name))

},{"../components/progressLoader":8,"../components/album":3,"../services":12,"../models":9}],10:[function(require,module,exports){
module.exports = {
    Observable:  function() {
        var channels = {}
        return {
            register: function(subscriptions, controller) {
                return function self() {
                    var ctrl = new controller
                    var reload = controller.bind(ctrl)
                    Observable.on(subscriptions, reload)
                    ctrl.onunload = function() {
                        Observable.off(reload)
                    }
                    return ctrl
                }
            },
            on: function(subscriptions, callback) {
                subscriptions.forEach(function(subscription) {
                    if (!channels[subscription]) channels[subscription] = []
                    channels[subscription].push(callback)
                })
            },
            off: function(callback) {
                for (var channel in channels) {
                    var index = channels[channel].indexOf(callback)
                    if (index > -1) channels[channel].splice(index, 1)
                }
            },
            trigger: function(channel, args) {
                // console.log(channel)
                channels[channel].map(function(callback) {
                    callback(args)
                })
            }
        }
    },

    // closure for easy localStorage setting
    storage: function (key) {
        return function(val){
            if(val) localStorage.setItem(key, val);
            return localStorage.getItem(key);
        }
    }

}

},{}],12:[function(require,module,exports){
var settings = require('./settings');
var Storage = require('./helper').storage;
var accessToken = Storage('accessToken');
var userId = Storage('userId');

var fbBaseUrl = "https://www.facebook.com";

module.exports = {
    FB: {
        invokeLoginDialogue: function(){
            var url = fbBaseUrl + "/dialog/oauth?client_id=" + settings.appId +
            "&response_type=code token" +
            "&redirect_uri=" + settings.url;

            console.log(url)

            window.open(url); // replace current url instead of this
        },
        getLoginUrlParams: function(){

            return {
                errorReason: m.route.param("errorReason"),
                errorDescription: m.route.param("errorDesc"),
                error: m.route.param("error"),

                accessToken: m.route.param("accToken"),
                tokenExpiry: m.route.param("exp"),
                code: m.route.param("code")
            }
        },
        checkTokenValid: function(){
            var url = "https://graph.facebook.com/debug_token?input_token=" + accessToken();
            url = url + "&access_token=" + accessToken();
            // console.log('check Token', url)

            return m.request({
                method: "GET",
                url: url,
                background: true, // dont affect rendering (Mithril)
                unwrapSuccess: function(response) {
                    return response.data;
                },
                unwrapError: function(response) {
                    return response.error;
                }
            }).then(function(data){
                userId(data.user_id);

                return data.is_valid;
            })
        },

        // next

    }
    // popup service
}

},{"./settings":4,"./helper":10}],11:[function(require,module,exports){
var Services = require('../services');
var Storage = require('../helper').storage;

module.exports = {
    controller: function () {
        var error = m.prop('');
        var accessToken = Storage('accessToken');

        // check if Url Has token

        var params = Services.FB.getLoginUrlParams();

        if(params.accessToken){

            console.log('storeaccess');
            accessToken(params.accessToken); // store in local storage
            m.route('/albums');
        }
        else if (params.error){
            error(params.errorDescription) // show error
            console.log('tken error', params);
        }

        return {
            error: error,
            login: Services.FB.invokeLoginDialogue
        }
    },

    view: function (ctrl) {
        var loginBtn = m('.btn-floating.waves-effect.waves-light.btn-large.blue', {onclick: ctrl.login}, [
            m('i.fa.fa-facebook')
        ]);
        return m('.btn-fb-login',loginBtn)
    }
}

},{"../services":12,"../helper":10}]},{},[1])
;