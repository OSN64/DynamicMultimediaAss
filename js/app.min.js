;(function(e,t,n){function i(n,s){if(!t[n]){if(!e[n]){var o=typeof require=="function"&&require;if(!s&&o)return o(n,!0);if(r)return r(n,!0);throw new Error("Cannot find module '"+n+"'")}var u=t[n]={exports:{}};e[n][0](function(t){var r=e[n][1][t];return i(r?r:t)},u,u.exports)}return t[n].exports}var r=typeof require=="function"&&require;for(var s=0;s<n.length;s++)i(n[s]);return i})({1:[function(require,module,exports){
// domready
$( document ).ready(function(){
    // Observable = require('./helper').Observable.call(); // event systsem
    // create promise delay funtion

    require('./helper');

    var navbars = require('./components/navbars');
    // var albumComponent = require('./components/album');
    // var settings = require('./settings'); // load settings

    // m.computati start
    var router = require('./router');
    m.mount(document.getElementsByTagName('header')[0], navbars);

    // m.mount($('footer')[0],albumComponent);

});

},{"./helper":2,"./components/navbars":3,"./router":4}],2:[function(require,module,exports){
Promise.delay = function(time){
    return new Promise(function (resolve) {
        setTimeout(resolve, time);
    });
}
module.exports = {
    Observable:  function() {
        var channels = {}
        return {
            register: function(subscriptions, controller) {
                return function self() {
                    var ctrl = new controller
                    var reload = controller.bind(ctrl)
                    Observable.on(subscriptions, reload)
                    ctrl.onunload = function() {
                        Observable.off(reload)
                    }
                    return ctrl
                }
            },
            on: function(subscriptions, callback) {
                subscriptions.forEach(function(subscription) {
                    if (!channels[subscription]) channels[subscription] = []
                    channels[subscription].push(callback)
                })
            },
            off: function(callback) {
                for (var channel in channels) {
                    var index = channels[channel].indexOf(callback)
                    if (index > -1) channels[channel].splice(index, 1)
                }
            },
            trigger: function(channel, args) {
                // console.log(channel)
                channels[channel].map(function(callback) {
                    callback(args)
                })
            }
        }
    },

    // closure for easy localStorage setting
    storage: function (key) {
        return function(val){
            if(arguments.length) localStorage.setItem(key, val);
            return localStorage.getItem(key);
        }
    }

}

},{}],4:[function(require,module,exports){
var splashPage = require('./pages/splash');
var albumsPage = require('./pages/albums');

var settings = require('./settings');
var Storage = require('./helper').storage;
var accessToken = Storage('accessToken');
var userId = Storage('userId');

// hack for fb Redirect urls
// checks if url is a fb redirect url
// if not return
// if fb url found convert to hash route url
function checkForFbRedirectUrl(location){
    var hash = location.hash;
    var currSite = location.origin;

    var isFbUrl = location.href.indexOf(currSite + '/?') == 0; // if this is the first substring in the url

    // console.log(isFbUrl,currSite,hash)

    if(!isFbUrl) return;

    if(hash[0] == "#") hash = hash.substr(1); // remove first hash

    var hashArr = hash.split('&');

    // split hash to array of objects
    hashArr = hashArr.map(function(hashItem){
        var itemSplit = hashItem.split('=');
        return {
            key: itemSplit[0],
            value: itemSplit[1]
        }
    });
    // replace all = and &
    // var rawParams = iURL.index('?');
    // if (rawParams > -1) {
    //     window.location.replace(location.origin +'/'+ rawParams.replace(/&|=/g, '/'));
    //     } else {
    //     return;
    // }
    // console.log(hashArr);

    // generate output url
    var URL = currSite + '/#'; // hash for hash routing
    URL += settings.loginRedirectRoute;

    hashArr.forEach(function(item){
        var urlParam = '/' + item.key + '/' + item.value;
        URL += urlParam;
    });


    return URL;
}

var parsedUrl = checkForFbRedirectUrl(window.location)
if (parsedUrl) return window.location.replace(parsedUrl); // if found change route

var logOutComponent = {
    controller: function () {
        // clear stored values
        accessToken('');
        userId('');

        m.route('/')
    }
}


m.route.mode = "hash";
m.route( $('main')[0], '/', {
    // fb routes
    '/fbLogin/access_token/:accToken/expires_in/:exp/code/:code' : splashPage,
    // error route
    '/fbLogin/error_reason/:errorReason/error/:error/error_description/:errorDesc' : splashPage,


    '/' : splashPage,
    '/logout' : logOutComponent,

    '/albums' : albumsPage,
    '/album/:id' : albumsPage,
    // '/documentation': function(){},
    // '/about': function(){}
});


// another router for footer

},{"./pages/splash":5,"./pages/albums":6,"./settings":7,"./helper":2}],3:[function(require,module,exports){
// Header component
var sideLinks = [ // static
    {title: "Home", url: "/"},
    {title: "Albums", url: "/albums"},
    {title: "Documentation", url: "/doc"},
    {title: "About", url: "/about"},
];

var Storage = require('../helper').storage;
var userId = Storage('userId');
var userName = Storage('userName');

module.exports = {
    controller: function() {
        m.redraw.strategy("diff");
    },
    view: function(ctrl) {
        var currRoute = m.route();
        // console.log('dont')
        // m.redraw.strategy("none");
        return m('nav', {config: navConf}, m('.nav-wrapper', [
            m('a', { href: '#!', class: 'brand-logo center' }, 'Paradise Point'),

            m('a', { href: '#', class: 'button-collapse', 'data-activates': 'mobile-demo' }, m('i', { class: 'material-icon' }, 'menu') ),


            m("ul.right.hide-on-med-and-down", [
        		m("li", [
                    userId() ? m('a',{ href: '/logout', config: m.route }, userName() + ' Log Out') : ''
                ]),
        	]),

            m('ul#mobile-demo', { class: 'side-nav fixed'},[
                sideLinks.map(function(link) {
                    var isActiveRoute = (currRoute == link.url ? 'active' : '');

                    return m('li', { class: isActiveRoute }, [
                        m('a', { href: link.url, config: m.route }, link.title)
                    ]);
                }),

            ])
        ]));
    }
}
    // {title: "Logout", url: "#/logout"},


var navConf = function(element, isInitialized, context) {
    if (!isInitialized) {
        $('.button-collapse').sideNav({
            'edge': 'left',
            // closeOnClick: true
        });
    }


};

},{"../helper":2}],7:[function(require,module,exports){
module.exports = {
    appId: "",
    pageId: "",

    adminUid: "",

    url: "http://example.com",

    loginRedirectRoute: "/fbLogin"
};

},{}],5:[function(require,module,exports){
var fbLoginComponent = require('../components/fbLogin');

module.exports = {
    //the Todo class has two properties
    controller: function() {},
    view: function() {
        return m('div', {config: parallaxConf},[
            parallaxItem({src: "images/parallax1.jpg"}),
            centerParallaxItem(),
            parallaxItem({src: "images/parallax2.jpg"}),
        ]);
    }
};

var parallaxItem = function(img){
    return m('.parallax-container',[
        m('.parallax',[
            m('img', {src: img.src})
        ])
    ]);
}

var centerParallaxItem = function(){
    return m('#main-splash.section',[
        m('.row',[
            m('.col.offset-l1.l10.s12.white.z-depth-1', [
                m('article', [
                    m('col.l2.m4.s6', [
                        m('img.responsive-img', {src: "http://www.android-kiosk.com/wp-content/themes/MaterialPress-master/images/ic_launcher.png"})
                    ]),
                    m('.splash-content', [
                        m('.col.l10.m8.s12', [
                            fbLoginComponent,
                            m('h4.grey-text.darken-2.light','hehehe')
                        ]),
                        m('.col.l10.m8.s12', [
                            // m.trust('<h4 class="grey-text darken-2 light">Kiosk Browser Lockdown</h4>'),
                            // fbLoginComponent || 'ss'
                            // m.trust('<a class="btn-floating waves-effect waves-light btn-large red"><i class="material-icons">add</i></a>'),
                            // m.trust('<h5 class="grey-text darken-2 light">ProCo Apps</h5>'),
                            // m.trust('<p><a class="waves-effect waves-light btn light-green darken-1" href="https://play.google.com/store/apps/details?id=com.procoit.kioskbrowser" rel="noreferrer"><i class="mdi-av-play-shopping-bag left"></i>Download Free</a>&nbsp;<a class="waves-effect waves-light btn teal" href="https://sites.fastspring.com/androidkiosk/instant/kioskbrowserpro&amp;tags=kioskbrowser" rel="noreferrer"><i class="mdi-action-credit-card left"></i>Buy Pro £5.00*</a><br>'),
                            // m.trust('<span style="font-size: 0.5em;">*Plus tax where applicable</span></p>'),
                            // m.trust('<p class="grey-text darken-3">Kiosk Browser has been designed for use on any android device and is great for creating public kiosks, interactive digital signage etc…. It locks down the user interface so that the end-user isn’t able to adjust Android system settings or gain access to other applications.</p>'),
                            // m.trust('<p class="grey-text darken-3">We are always adding new features, if you need something specific for your project please get in touch.</p>'),
                            // m.trust('<p><a class="waves-effect waves-light btn light-blue darken-3" href="http://www.android-kiosk.com/screenshots" rel="noreferrer"><i class="mdi-image-photo-camera left"></i>Screenshots</a></p>')
                        ])
                    ])
                ])
            ])
        ])
    ]);
}

var parallaxConf = function(el, isInit, context) {
    if (!isInit) {
        $('.parallax').parallax();
    }
};

},{"../components/fbLogin":8}],6:[function(require,module,exports){
var progressLoader = require('../components/progressLoader');
var albumComponent = require('../components/album');
var Services = require('../services');
var Models = require('../models');
var Page = Models.Page;
var Album = Models.Album;

module.exports = {
    //     //the Todo class has two properties
    controller: function() {
        // console.log('aaa')
        // var error = m.prop('');
        var page = m.prop({});
        var albums = m.prop([]);
        var visitorsPosts = m.prop([]);
        var albumOpen = m.prop(false);

        var openAlbum = function(id){
            // var route = '/album/' + id;
            //
            // var currRouteIsSame = m.route() == route;
            // // console.log(route,m.route(),currRouteIsSame)
            //
            // if(currRouteIsSame){ // just moved in from route change
            //     albumOpen(true);
            // }
            // else m.route(route);
            m.mount(document.getElementsByTagName('footer')[0],m.component(albumComponent, {id:id}))
        }

        var currAlbumId = +m.route.param("id"); // convert to integer

        if(!isNaN(currAlbumId)){
            openAlbum(currAlbumId);
        }

        Services.FB.isLoggedIn().then(function(valid){
            if(!valid) return Promise.reject('Token Not Valid');

            return Promise.all([
                Page.getDetails(),
                Album.getAll(),
                Page.getVisitorsPosts()
            ]);
        }).then(function(all){ // set valuse
            page(all[0]);
            albums(all[1]);
            visitorsPosts(all[2]);
        }).then(m.redraw,function(e){

            Services.Popup({text: 'Error Unable to Load Page', timeout: 4000}, function done(){
                m.route('/'); // logout
            });
            console.log('error Token Not Valid', e)
            // 'Unable to Load Please Login again' .. button to home route
            // popup service
            // pop up 'invalid Login token' .. redirect home
            // return m.route('/')
        });
        // redraw stategy div
        // m.redraw.strategy('diff');
        return {
            page: page, // object
            albums: albums, // array
            visitorsPosts: visitorsPosts, //array
            albumOpen: albumOpen, // bool
            openAlbum: openAlbum, // function

            // error: error, // string
            onunload: onunload
        }

    },

    view: function(ctrl) {
        var page = ctrl.page;

        return m('.container', {config: persistent}, [
            !ctrl.albums().length ?  m.component( progressLoader, {id: 'page-load-progress'}) :
            m('.albums-view',[
                m('#album-head', [
                    albumsHead(page,ctrl.visitorsPosts)
                ]),
                m('#albums-content', [
                    m('h1', "Top Australia Destinations"),
                    m('.divider'),
                    m('.albums-items.row', [
                        ctrl.albums().length ?
                        ctrl.albums().map(function(album){
                            return albumsCard(ctrl.openAlbum,album)
                        }) :
                        p('h1', 'No Destinations Found')
                        ,
                    ])
                ]),
            ]),
            // ctrl.albumOpen() ? m.component(albumComponent, {id:m.route.param("id")}) : ''
        ]);
    }
};
//a configuration that persists across route changes
function persistent(el, isInit, context) {
    context.retain = true
}
var albumsHead = function(page,posts){
    return m('.row', [
        m('.col.s12.m9.l8',[
            m('h1', page().name),
            m('p', page().description)
        ]),
        m('.col.hide-on-small-only.m3.l4',[
            m('ul.collection.with-header',[
                m('li.collection-header', 'Feed'),

                posts().map(function(post){
                    return m('li.collection-item', [
                        m('p', post.message),
                        m('sub', 'Admin liked this post')
                    ]);
                })
            ])
        ]),
    ]);
}

var albumsCard = function(onclick,album){
    return m('.col.s12.m6.l6',[
        m('.card-image.waves-effect',{onclick: onclick.bind(onclick,album.id)},[
            m('img.responsive-img',{src: album.coverSource, style: { height: '400px'}}),
            m('span.card-title',album.name + ' Likes: ' + album.likes.length)
        ])
    ]);
}

// var ctrlr = this;
// //a running list of todos
// ctrlr.list = new todo.TodoList();
//
// //a slot to store the name of a new todo before it is created
// ctrlr.description = m.prop('');
//
// //adds a todo to the list, and clears the description field for user convenience
// ctrlr.add = function(description) {
//     if (description()) {
//         ctrlr.list.push(new todo.Todo({description: description()}));
//         ctrlr.description("");
//     }
// };

//refactor the binding to a simple helper
// var binds = function(prop) {
//     return {oninput: m.withAttr("value", prop), value: prop()}
// }
//
// //a data store
// var name = m.prop("")
//
// //binding the data store in a view
// m("input", binds(name))

},{"../components/progressLoader":9,"../components/album":10,"../services":11,"../models":12}],9:[function(require,module,exports){
var circle = m('.circle');
module.exports = {
    controller: function(args){
        // console.log(args)
        this.id = args.id || '';
        // var classes =
        // this.class = classes.join(' ')
        // ability to run function that sets class active
    },
    view: function(ctrl,args){
        return m('.preloader-wrapper', { id: ctrl.id, class: "big active" },[
            m('.spinner-layer.spinner-blue-only',[
                m('.circle-clipper.left',circle),
                m('.gap-patch',circle),
                m('.circle-clipper.right',circle)
            ])
        ]);
    }
}

},{}],11:[function(require,module,exports){
var settings = require('./settings');
var Storage = require('./helper').storage;
var accessToken = Storage('accessToken');
var userId = Storage('userId');
var userName = Storage('userName');

var fbBaseUrl = "https://www.facebook.com";

module.exports = {
    FB: {
        getLoginUrl: function(){
            var url = fbBaseUrl + "/dialog/oauth?client_id=" + settings.appId +
            "&response_type=code token" +
            "&scope=publish_actions" +
            "&redirect_uri=" + settings.url;

            return url;
        },
        getLoginUrlParams: function(){

            return {
                errorReason: m.route.param("errorReason"),
                errorDescription: m.route.param("errorDesc"),
                error: m.route.param("error"),

                accessToken: m.route.param("accToken"),
                // tokenExpiry: m.route.param("exp"),
                // code: m.route.param("code")
            }
        },
        isLoggedIn: function(){
            var url = "https://graph.facebook.com/me?access_token=" + accessToken();

            return m.request({
                method: "GET",
                url: url,
                background: true, // dont affect rendering (Mithril)
                unwrapError: function(response) {
                    return response.error;
                }
            }).then(function(data){
                userId(data.id);
                userName(data.name);

                return !!data.id;
            })
        },

        // next

    },

    Popup: function (args,cb) {
        var toastContent = (args.text || 'alert');
        return Materialize.toast(toastContent, args.timeout || 5000, args.class || '',cb);
    }
    // https://github.com/rstacruz/nprogress

    // popup service
    // https://github.com/CodeSeven/toastr
    // or http://fezvrasta.github.io/snackbarjs/
}

},{"./helper":2,"./settings":7}],12:[function(require,module,exports){
// api key
var settings = require('./settings');
var Storage = require('./helper').storage;
var accessToken = Storage('accessToken');

var graphApiBaseUrl = "https://graph.facebook.com/v2.5";
var graphPageUrl = graphApiBaseUrl + '/' + settings.pageId;

module.exports = {

    Page: {
        getDetails: function(){
            var params = "?fields=description,name&access_token=" + accessToken();
            var url = graphPageUrl + params;

            return m.request({
                method: "GET",
                url: url,
                background: true, // dont affect rendering (Mithril)
                unwrapError: function(response) {
                    return response.error;
                }
            });
        },

        getVisitorsPosts: function(){

            var params = "/feed?fields=likes{name},story,message&access_token=" + accessToken();
            var url = graphPageUrl + params;

            // request gets page feed
            return m.request({
                method: "GET",
                url: url,
                background: true, // dont affect rendering (Mithril)
                unwrapError: function(response) {
                    return response.error;
                }
            }).then(function(d){
                return d.data;
            }).then(filterByNoStoryField)
            .then(getUserLikedPosts.bind(null, settings.adminUid));

        }
    },
    // page Albums
    Album: {
        getAll: function(){
            var params = "?fields=albums{location,name,likes,cover_photo}&access_token=" + accessToken();
            var url = graphPageUrl + params;

            return m.request({
                method: "GET",
                url: url,
                background: true, // dont affect rendering (Mithril)
                 // to json cast or not to cast
                unwrapError: function(response) {
                    return response.error;
                }
            }).then(function(d){
                return d.albums.data;
            })
            .then(filterByAulocation)
            .then(getCoverPhotos)
            .then(sortByLikesDesc)
            .then(formatEachAlbum);
            // .then(printEach)
        },

        get: function(id){
            var params = "?fields=photos{images,likes,name},name&access_token=" + accessToken();
            var url = graphApiBaseUrl + '/' + id + params;

            return m.request({
                method: "GET",
                url: url,
                background: true, // dont affect rendering (Mithril)
                unwrapError: function(response) {
                    return response.error;
                }
            }).then(formatPhotos);
        }
    },

    Picture: {
        like: function(pictureId,like){
            var url = graphApiBaseUrl + '/' + pictureId + '/likes?access_token=' + accessToken();

            // like or unlike
            var method = (like ? 'POST': 'DELETE');

            return m.request({
                method: method,
                url: url,
                background: true, // dont affect rendering (Mithril)
                unwrapError: function(response) {
                    return response.error;
                }
            }).then(function(data){
               return like;
            });

        }
    }
}

var getCoverSrc = function(coverId){
    var params = "?fields=source&access_token=" + accessToken();
    var url = graphApiBaseUrl + '/' + coverId + params;

    return m.request({
        method: "GET",
        url: url,
        background: true, // dont affect rendering (Mithril)
         // to json cast or not to cast
        unwrapError: function(response) {
            return response.error;
        }
    }).then(function(data){
        return data.source;
    })
}
function filterByAulocation(data){
    return data.filter(function(al){
        var loc = al.location || '';
        return loc.toLowerCase().indexOf('australia') >= 0;
    })
}
function getCoverPhotos(albums){
    albums = albums.map(function (album) {
        return getCoverSrc(album.cover_photo.id).then(function(coverSource){
            album.coverSource = coverSource;
            return album;
        });
    });
    return Promise.all(albums);
}
function sortByLikesDesc(data){
    return data.sort(function(a,b){
        var prevLikes = a.likes.data.length;
        var nextLikes = b.likes.data.length;
        return prevLikes < nextLikes;
    });
}

function printEach(data){
    return data.forEach(function(al){
        console.log(al)
    });
    // console.log(data)
}
function formatEachAlbum(data){
    return data.map(function(al){
        return {
            id: al.id,
            name: al.name,
            coverSource: al.coverSource,
            likes: al.likes.data
        }
    })
}

function getImageByHeightLargest(data){
    return data.sort(function(a,b){
        var prevHeight = a.height;
        var nextHeight = b.height;
        return prevHeight < nextHeight;
    })[0];
}
function getImageByHeight(images,height){
    return images.filter(function(image){
        return image.height == height;
    })[0] || images[images.length - 1];
}
function formatPhotos(data){
    data.photos = data.photos.data.map(function (photo) {

        return {
            id: photo.id,
            description: photo.name,
            thumbSrc: getImageByHeight(photo.images, 320).source,
            lgSrc: getImageByHeightLargest(photo.images).source,
            like: {
                count: photo.likes.data.length, // get num of likes
                users: photo.likes.data
            }
        };
    });
    return data;
}

function filterByNoStoryField(items){
    return items.filter(function(items){
        return !items.story;
    });
}

function getUserLikedPosts(uId,items){
    return items.filter(function(item){
        var likes = item.likes || {data: []};

        return likes.data.filter(function(user){
            return user.id == uId;
        }).length;
    });
}

},{"./settings":7,"./helper":2}],8:[function(require,module,exports){
var Services = require('../services');
var Storage = require('../helper').storage;

module.exports = {
    controller: function () {
        var error = m.prop('');
        var accessToken = Storage('accessToken');

        // check if Url Has token
        var params = Services.FB.getLoginUrlParams();

        if(params.accessToken){

            console.log('storeaccess');
            accessToken(params.accessToken); // store in local storage
            m.route('/albums');
        }
        else if (params.error){
            error(params.errorDescription) // show error
            console.log('tken error', params);
            // popup unable to Authenticate 
        }

        function openLoginDialogue(){
            var url = Services.FB.getLoginUrl();
            window.location.replace(url)
        }

        return {
            error: error,
            openLogin: openLoginDialogue
        }
    },

    view: function (ctrl) {
        var loginBtn = m('.btn-floating.waves-effect.waves-light.btn-large.blue', {onclick: ctrl.openLogin}, [
            m('i.fa.fa-facebook')
        ]);
        return m('.btn-fb-login',loginBtn)
    }
}

},{"../services":11,"../helper":2}],10:[function(require,module,exports){
var progressLoader = require('../components/progressLoader');
var photosComponent = require('../components/photos');
var Models = require('../models');
var Album = Models.Album;

module.exports = {
    //the Todo class has two properties

    controller: function(args) {
        args = args || {};

        var album = {
            id: args.id, // static
            name: m.prop(''),
            photos: m.prop([])
        };

        // ctrl.modalOpen = m.prop(false);
        var error = m.prop('');

        // m.redraw.strategy("none");

        var loadAlbum = function(id){
            Album.get(id)
            .then(function(iAlbum){

                album.name(iAlbum.name);
                return iAlbum.photos
            }).then(album.photos)//  set as img
            .then(function(photos){
                if(!photos.length) error( 'No photos were found');
                // console.log('redraw')
            }).then(m.redraw, function(e){
                // catch error
                console.log(e);
                error( 'No photos were found');
                m.redraw(true);
            });
        }

        loadAlbum(album.id);

        return {
            album: album,

            error: error
        }

    },
    view: function(ctrl,args) {
        var album = ctrl.album;

        // loading
        // console.log('state change',ctrl);
        return m('.album-modal', {class: "modal modal-fixed-footer", config:modalOpen}, [
            m('.modal-content',[
                m('h4', album.name()),
                function checkState(){
                    if (ctrl.error()) return errorView(ctrl.error());
                    // photos component
                    else if (album.photos().length) return m.component( photosComponent, {photos: album.photos()} );
                    // animated progress icon
                    else return m.component( progressLoader, {id: 'album-load-progress'} );
                }(),
            ]),
            // m('.modal-footer',[
            //     m('button',{class: "modal-action modal-close waves-effect waves-green btn-flat"}, "Agree")
            // ])
        ]);
    }
};
//
var modalOpen = function(element, isInitialized, context) {
    if (!isInitialized) {
        $(element).openModal();
    }
};
var errorView = function(error){
    return m('h2', error)
}

},{"../components/progressLoader":9,"../components/photos":13,"../models":12}],13:[function(require,module,exports){
var Models = require('../models');
var Storage = require('../helper').storage;
var userId = Storage('userId');
var Picture = Models.Picture;
var lightbox = window.lity();


module.exports = {
    controller: function (args) {

        var photos = {};

        // convert array to hash map
        var photosHash = args.photos.reduce(function(map, photo) { // does it call the last value

            map[photo.id] = {
                id: photo.id,
                description: photo.description,
                lgSrc: photo.lgSrc,
                thumbSrc: photo.thumbSrc,

                // non static variables
                likeCount: m.prop(photo.like.count),
                likedByUser: m.prop(hasUserId(photo.like.users,userId()))
            };
            return map;
        }, {});

        function likeOrUnlike(photo){
            var Liked = photosHash[photo.id].likedByUser;
            var likeCount = photosHash[photo.id].likeCount;

            Picture.like(photo.id,!Liked()).then(function(like){

                if(like) likeCount(likeCount() + 1)
                else likeCount(likeCount() - 1)

                Liked(like); // set val

            }).then(m.redraw);

            // model photo like
            // likeCount(likeCount() + 1);
            // Liked(!Liked());
            // m.redraw(true);
        }

        return {
            photosHash: photosHash,
            likeOrUnlike: likeOrUnlike
        }
    },

    view: function(ctrl){
        var openLightboxPhoto = function(photo){
            console.log('open lightbox', photo);
            lightbox(photo.lgSrc)
        }
        // config to top fade in
        // config hide then fade in slow
        return m('.photos.row', [
            Object.keys(ctrl.photosHash).map(function(key){
                var photo = ctrl.photosHash[key];
                return photoCard(openLightboxPhoto, ctrl.likeOrUnlike, photo)
            }),
        ]);
    }
}

function hasUserId (users,userId){
    return users.filter(function(user){
        return user.id == userId;
    })[0] ? true : false;
}

// // row columns
var photoCard = function(onCardClick, onLikeClick, photo){
    // console.log(photo.likedByUser()) // width: '200px'
    // onLikeClick.bind(null,photo.id, !photo.likedByUser)
    //  <i class="small material-icons">thumb_up</i>
    return m('.col.s12.m6.l4',[
        m(".card.card-photo.hoverable", [
    		m(".card-image.waves-effect.waves-block.waves-light", [
    			m("img.responsive-img", {src: photo.thumbSrc, style: { height: '320px' }, onclick: onCardClick.bind(null,photo)}),
                m("a.btn-fb-like.btn-floating.waves-effect.waves-light.btn-large", { onclick: onLikeClick.bind(null,photo), class: photo.likedByUser() ? 'blue' : '' } , [
                    m("i.material-icons", "thumbs_up_down")
                ]),
                m('.chip.chip-likes', photo.likeCount() + ' Likes'),
                m("span.card-title", photo.description) // use content or this for desc
    		]),
    		// m(".card-content", [
    		// 	m("p", photo.description)
    		// ]),
    		// m(".card-action", [
    		// 	m("a[href='#']", ' Likes: ' + photo.likeCount())
    		// ])
    	])
    ]);
}

},{"../models":12,"../helper":2}]},{},[1])
;