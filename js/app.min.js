;(function(e,t,n){function i(n,s){if(!t[n]){if(!e[n]){var o=typeof require=="function"&&require;if(!s&&o)return o(n,!0);if(r)return r(n,!0);throw new Error("Cannot find module '"+n+"'")}var u=t[n]={exports:{}};e[n][0](function(t){var r=e[n][1][t];return i(r?r:t)},u,u.exports)}return t[n].exports}var r=typeof require=="function"&&require;for(var s=0;s<n.length;s++)i(n[s]);return i})({1:[function(require,module,exports){
// domready
$( document ).ready(function(){

    require('./helper');
    var navbars = require('./components/navbars');
    var router = require('./router');
    m.mount(document.getElementsByTagName('header')[0], navbars);
});

},{"./helper":2,"./components/navbars":3,"./router":4}],2:[function(require,module,exports){
Promise.delay = function(time){
    return new Promise(function (resolve) {
        setTimeout(resolve, time);
    });
}
module.exports = {
    Observable:  function() {
        var channels = {}
        return {
            register: function(subscriptions, controller) {
                return function self() {
                    var ctrl = new controller
                    var reload = controller.bind(ctrl)
                    Observable.on(subscriptions, reload)
                    ctrl.onunload = function() {
                        Observable.off(reload)
                    }
                    return ctrl
                }
            },
            on: function(subscriptions, callback) {
                subscriptions.forEach(function(subscription) {
                    if (!channels[subscription]) channels[subscription] = []
                    channels[subscription].push(callback)
                })
            },
            off: function(callback) {
                for (var channel in channels) {
                    var index = channels[channel].indexOf(callback)
                    if (index > -1) channels[channel].splice(index, 1)
                }
            },
            trigger: function(channel, args) {
                // console.log(channel)
                channels[channel].map(function(callback) {
                    callback(args)
                })
            }
        }
    },

    // closure for easy localStorage setting
    storage: function (key) {
        return function(val){
            if(arguments.length) localStorage.setItem(key, val);
            return localStorage.getItem(key);
        }
    }

}

},{}],4:[function(require,module,exports){
var splashPage = require('./pages/splash');
var albumsPage = require('./pages/albums');
var aboutPage = require('./pages/about');
var docPage = require('./pages/documentation');

var settings = require('./settings');
var Storage = require('./helper').storage;
var accessToken = Storage('accessToken');
var userId = Storage('userId');

// hack for fb Redirect urls
// checks if url is a fb redirect url
// if not return
// if fb url found convert to hash route url
function checkForFbRedirectUrl(location){
    var hash = location.hash;
    var currSite = location.origin;

    var isFbUrl = location.href.indexOf(currSite + '/?') == 0; // if this is the first substring in the url

    if(!isFbUrl) return;

    if(hash[0] == "#") hash = hash.substr(1); // remove first hash

    var hashArr = hash.split('&');

    // split hash to array of objects
    hashArr = hashArr.map(function(hashItem){
        var itemSplit = hashItem.split('=');
        return {
            key: itemSplit[0],
            value: itemSplit[1]
        }
    });

    var URL = currSite + '/#'; // hash for hash routing
    URL += settings.loginRedirectRoute;

    hashArr.forEach(function(item){
        var urlParam = '/' + item.key + '/' + item.value;
        URL += urlParam;
    });

    return URL;
}

// check if fb url found then change route
var parsedUrl = checkForFbRedirectUrl(window.location)
if (parsedUrl) return window.location.replace(parsedUrl);

// function for logging the user out
var logOutComponent = {
    controller: function () {
        // clear stored values
        accessToken('');
        userId('');

        m.route('/')
    }
}


m.route.mode = "hash";
m.route( $('main')[0], '/', {
    // fb routes
    '/fbLogin/access_token/:accToken/expires_in/:exp/code/:code' : splashPage,
    // error route
    '/fbLogin/error_reason/:errorReason/error/:error/error_description/:errorDesc' : splashPage,

    '/' : splashPage,
    '/logout' : logOutComponent,

    '/albums' : albumsPage,
    '/album/:id' : albumsPage,
    '/doc': docPage,
    '/about': aboutPage
});

},{"./pages/splash":5,"./pages/albums":6,"./pages/about":7,"./pages/documentation":8,"./settings":9,"./helper":2}],3:[function(require,module,exports){
// Header component
var sideLinks = [ // static
    {title: "Home", url: "/"},
    {title: "Albums", url: "/albums"},
    {title: "Documentation", url: "/doc"},
    {title: "About", url: "/about"},
];

var Storage = require('../helper').storage;
var userId = Storage('userId');
var userName = Storage('userName');

module.exports = {
    controller: function() {
        m.redraw.strategy("diff");
    },
    view: function(ctrl) {
        // get current route
        var currRoute = m.route();

        return m('nav', {config: navConf}, m('.nav-wrapper', [

            m('a', { href: '#', class: 'button-collapse', 'data-activates': 'mobile-demo' }, m('i', { class: 'material-icon' }, 'menu') ),


            m("ul.right.hide-on-med-and-down", [
        		m("li", [
                    userId() ? m('a',{ href: '/logout', config: m.route }, userName() + ' Log Out') : ''
                ]),
        	]),

            m('ul#mobile-demo', { class: 'side-nav fixed'},[
                sideLinks.map(function(link) {
                    var isActiveRoute = (currRoute == link.url ? 'active' : '');
                    
                    return m('li', { class: isActiveRoute }, [
                        m('a', { href: link.url, config: m.route }, link.title)
                    ]);
                }),

            ])
        ]));
    }
}

var navConf = function(element, isInitialized, context) {
    if (!isInitialized) {
        $('.button-collapse').sideNav({
            'edge': 'left',
            // closeOnClick: true
        });
    }
};

},{"../helper":2}],7:[function(require,module,exports){

module.exports = {
    //the Todo class has two properties
    controller: function() {},
    view: function() {
        return m('.container', [
            m('h1', 'About'),
            m('blockquote', [
                m('p', 'By: Enoch Onamusi'),
                m('p', 'Student No: s2878369'),
                m('a', {href: 'http://travel.techthrones.com'}, 'http://travel.techthrones.com')
            ])
        ]);
    }
};

},{}],8:[function(require,module,exports){
var firstText = "In with this web site i have utilised some design principles. The main design principles focused on this website are proximity, repitition, alignment and interactivity.";
var secondText = "The use of proximity and alignment can be seen on the gallery page as each image has been spaced and do not touch each other, whilst being visable to the user.";
var thirdText = "Repitition is also used within the site in terms of the colours used. The base color which is the color of the top nav bar is used in multiple places such as the like button and the feed section. Making the  user familiar with the color is one way of keeping them focused on the content.";
var fourthText = "By using interactivity allow the user to experience the flow of information and bring a sense of commoness to the site. A major example of this is the loading animation that are shown on page transition and the fade in effect when images load.";

module.exports = {
    controller: function() {},
    view: function() {
        return m('.container', [
            m('h2', 'Documentation'),
            m('blockquote',firstText),

            m('h3','Proximity & alignment'),
            m('blockquote',secondText),

            m('h3','Repitition'),
            m('blockquote',thirdText),

            m('h3', 'Interactivity'),
            m('blockquote',fourthText)
        ]);
    }
};
var blockquote = function (text) {
    return m('blockquote',text)
}

},{}],9:[function(require,module,exports){
module.exports = {
    appId: "533953753419294",
    pageId: "815157038515764",

    adminUid: "815157038515764",

    url: "http://nigga.linuxx.org:6881",

    loginRedirectRoute: "/fbLogin"
};

},{}],5:[function(require,module,exports){
var fbLoginComponent = require('../components/fbLogin');

module.exports = {
    //the Todo class has two properties
    controller: function() {},
    view: function() {
        return m('#main-splash',[
            m(".row", [
                m(".col.s12.m6", [
                    m(".card.blue-grey.darken-1", [
                        m(".card-content.white-text", [
                            m("span.card-title", "Welcome Travellers to DMS Travel"),
                            m("p", "To Continue Please login to FaceBook via the button above")
                        ]),
                        m(".card-action", [
                            fbLoginComponent
                        ])
                    ])
                ])
            ]),
            m('#crab-anim', [
                m('img', {src: 'images/crab.png'})
            ])
        ]);
    }
};

},{"../components/fbLogin":10}],6:[function(require,module,exports){
var progressLoader = require('../components/progressLoader');
var albumComponent = require('../components/album');
var Services = require('../services');
var Models = require('../models');
var Page = Models.Page;
var Album = Models.Album;

module.exports = {
    //     //the Todo class has two properties
    controller: function() {
        // console.log('aaa')
        var page = m.prop({});
        var albums = m.prop([]);
        var visitorsPosts = m.prop([]);
        var ready = m.prop(false);

        var openAlbum = function(id){
            console.log('mount comp', m.route())
            m.mount(document.getElementsByTagName('footer')[0],m.component(albumComponent, {id:id}))
        }

        var currAlbumId = +m.route.param("id"); // convert to integer

        if(!isNaN(currAlbumId)){
            openAlbum(currAlbumId);
        }

        Services.FB.isLoggedIn().then(function(valid){
            if(!valid) return Promise.reject('Token Not Valid');

            return Promise.all([
                Page.getDetails(),
                Album.getAll(),
                Page.getVisitorsPosts(),
                Promise.delay(2000)
            ]);
        },function (e) {
            console.log('login error')
            Services.Popup({text: 'Error not logged in. Redirecting...', timeout: 4000}, function done(){
                m.route('/logout'); // logout
            });
        }).then(function(all){ // set valuse
            page(all[0]);
            albums(all[1]);
            visitorsPosts(all[2]);
            ready(true);

        }).then(m.redraw,function(e){
            Services.Popup({text: 'Error Unable to Load Page'});
        });
        function onunload() {
            console.log('unloaded');
        }
        console.log('contrlload')

        return {
            page: page, // object
            albums: albums, // array
            visitorsPosts: visitorsPosts, //array
            ready: ready, // bool
            openAlbum: openAlbum, // function
        }
    },

    view: function(ctrl) {
        var page = ctrl.page;

        console.log('view render')
        return m('.container', [
            !ctrl.ready() ?  m.component( progressLoader, {id: 'page-load-progress'}) :
            m('.albums-view', {config: fadeIn}, [
                m('#album-head', [
                    albumsHead(page,ctrl.visitorsPosts)
                ]),
                m('#albums-content', [
                    m('h1', "Top Australia Destinations"),
                    m('.divider'),
                    m('.albums-items.row', [
                        ctrl.albums().length ?
                        ctrl.albums().map(function(album){
                            return albumsCard(ctrl.openAlbum,album)
                        }) :
                        p('h1', 'No Destinations Found')
                        ,
                    ])
                ]),
            ]),
        ]);
    }
};

function fadeIn(el, isInit, context) {
    if (!isInit) {
        $(el).hide().fadeIn();
    }
}
var albumsHead = function(page,posts){
    return m('.row', [
        m('.col.s12.m9.l8',[
            m('h1', page().name),
            m(".card.blue-grey.darken-1", [
                m(".card-content.white-text", [
                    m('p', page().description)
                ])
            ])
        ]),
        m('.col.hide-on-small-only.m3.l4',[
            m('h1', 'Feed'),
            m('ul#feed.collection.with-header.white-text',[
                posts().map(function(post){
                    return m('li.collection-item', [
                        m('.row', [
                            m('.col.s12',[
                                m('blockquote', post.message),
                                m('sub', 'Admin liked this post')
                            ])
                        ])
                    ]);
                })
            ])
        ]),
    ]);
}

var albumsCard = function(onclick,album){
    return m('.album-container.s12.m6.l6',[
        m('.card', [
            m('.card-image.waves-effect',{onclick: onclick.bind(onclick,album.id)},[
                m('img.responsive-img.hoverable',{config: loadImage, src: album.coverSource, style: { height: '400px'}}),
                m('span.card-title',album.name || '')
            ])
        ])
    ]);
}

var loadImage = function (el,isInit,ctx) {
    ctx.retain = true;
    if(!isInit){
        $(el).addClass('image-load');
        $(el).load(function(){
            $(el).addClass('opacity-one');
        })
    }
}

},{"../components/progressLoader":11,"../components/album":12,"../services":13,"../models":14}],11:[function(require,module,exports){
var circle = m('.circle');
module.exports = {
    controller: function(args){
        // console.log(args)
        this.id = args.id || '';
        // var classes =
        // this.class = classes.join(' ')
        // ability to run function that sets class active
    },
    view: function(ctrl,args){
        return m('.preloader-wrapper', { id: ctrl.id, class: "big active" },[
            m('.spinner-layer.spinner-blue-only',[
                m('.circle-clipper.left',circle),
                m('.gap-patch',circle),
                m('.circle-clipper.right',circle)
            ])
        ]);
    }
}

},{}],13:[function(require,module,exports){
var settings = require('./settings');
var Storage = require('./helper').storage;
var accessToken = Storage('accessToken');
var userId = Storage('userId');
var userName = Storage('userName');

var fbBaseUrl = "https://www.facebook.com";

module.exports = {

    FB: {
        getLoginUrl: function(){
            var url = fbBaseUrl + "/dialog/oauth?client_id=" + settings.appId +
            "&response_type=code token" +
            "&scope=publish_actions" +
            "&redirect_uri=" + settings.url;

            return url;
        },
        getLoginUrlParams: function(){

            return {
                error: m.route.param("error"),
                accessToken: m.route.param("accToken"),
            }
        },
        // send request to see is users access token is valid
        isLoggedIn: function(){
            var url = "https://graph.facebook.com/me?access_token=" + accessToken();

            return m.request({
                method: "GET",
                url: url,
                background: true, // dont affect rendering (Mithril)
                unwrapError: function(response) {
                    return response.error;
                }
            }).then(function(data){
                userId(data.id);
                userName(data.name);

                return !!data.id;
            });
        },

    },

    Popup: function (args,cb) {
        var toastContent = (args.text || 'alert');
        return Materialize.toast(toastContent, args.timeout || 5000, args.class || '',cb);
    }
}

},{"./settings":9,"./helper":2}],14:[function(require,module,exports){
// api key
var settings = require('./settings');
var Storage = require('./helper').storage;
var accessToken = Storage('accessToken');

var graphApiBaseUrl = "https://graph.facebook.com/v2.5";
var graphPageUrl = graphApiBaseUrl + '/' + settings.pageId;

module.exports = {

    Page: {
        // request page details
        getDetails: function(){
            var url = graphPageUrl + "?fields=description,name&access_token=" + accessToken();

            return m.request({
                method: "GET",
                url: url,
                background: true, // dont affect rendering (Mithril)
                unwrapError: function(response) {
                    return response.error;
                }
            });
        },
        // request array of feed posts
        getVisitorsPosts: function(){

            var url = graphPageUrl + "/feed?fields=likes{name},story,message&access_token=" + accessToken();

            return m.request({
                method: "GET",
                url: url,
                background: true, // dont affect rendering (Mithril)
                unwrapError: function(response) {
                    return response.error;
                }
            }).then(function(d){
                return d.data;
            }).then(filterByNoStoryField)
            .then(getUserLikedPosts.bind(null, settings.adminUid));
        }
    },
    // page Albums
    Album: {
        getAll: function(){
            var url = graphPageUrl + "?fields=albums{location,name,likes,cover_photo}&access_token=" + accessToken();

            return m.request({
                method: "GET",
                url: url,
                background: true, // dont affect rendering (Mithril)
                unwrapError: function(response) {
                    return response.error;
                }
            }).then(function(d){
                return d.albums.data;
            })
            .then(filterByAulocation)
            .then(getCoverPhotos)
            .then(sortByLikesDesc)
            .then(formatEachAlbum);
        },

        get: function(id){
            var url = graphApiBaseUrl + '/' + id + "?fields=photos{images,likes,name},name&access_token=" + accessToken();

            return m.request({
                method: "GET",
                url: url,
                background: true, // dont affect rendering (Mithril)
                unwrapError: function(response) {
                    return response.error;
                }
            }).then(formatPhotos);
        }
    },

    Photo: { // photo
        toggleLike: function(photo){ // give photo // toggle like
            var url = graphApiBaseUrl + '/' + photo.id + '/likes?access_token=' + accessToken();

            // like or unlike
            var method = (!photo.likedByUser() ? 'POST': 'DELETE');

            return m.request({
                method: method,
                url: url,
                background: true, // dont affect rendering (Mithril)
                unwrapError: function(response) {
                    return response.error;
                }
            }).then(function(data){
               return !photo.likedByUser();
            });

        }
    }
}
// request cover image source
var getCoverSrc = function(coverId){
    var url = graphApiBaseUrl + '/' + coverId + "?fields=source&access_token=" + accessToken();

    return m.request({
        method: "GET",
        url: url,
        background: true, // dont affect rendering (Mithril)
        unwrapError: function(response) {
            return response.error;
        }
    }).then(function(data){
        return data.source;
    })
}
// Filter array by existance of the location string australia
function filterByAulocation(data){
    return data.filter(function(al){
        var loc = al.location || '';
        return loc.toLowerCase().indexOf('australia') >= 0;
    });
}
// for each album populate with cover souce
function getCoverPhotos(albums){
    albums = albums.map(function (album) {
        return getCoverSrc(album.cover_photo.id).then(function(coverSource){
            album.coverSource = coverSource;
            return album;
        });
    });
    return Promise.all(albums);
}
// sort array of liked from biggest to smallest
function sortByLikesDesc(data){
    return data.sort(function(a,b){
        var prevLikes = a.likes.data.length;
        var nextLikes = b.likes.data.length;

        return nextLikes - prevLikes;
    });
}
// return formated data
function formatEachAlbum(data){
    return data.map(function(al){
        return {
            id: al.id,
            name: al.name,
            coverSource: al.coverSource,
            likes: al.likes.data
        }
    })
}

function getImageByHeightLargest(data){
    return data.sort(function(a,b){
        var prevHeight = a.height;
        var nextHeight = b.height;
        return prevHeight < nextHeight;
    })[0];
}

function getImageByHeight(images,height){
    return images.filter(function(image){ // reduce
        return image.height == height;
    })[0] || images[images.length - 1];
}
// generate formated data with photos
function formatPhotos(data){
    data.photos = data.photos.data.map(function (photo) {

        return {
            id: photo.id,
            description: photo.name,
            thumbSrc: getImageByHeight(photo.images, 320).source,
            lgSrc: getImageByHeightLargest(photo.images).source,
            like: {
                count: photo.likes.data.length, // get num of likes
                users: photo.likes.data // might not need this
            }
        };
    });
    return data;
}

function filterByNoStoryField(items){
    return items.filter(function(items){
        return !items.story;
    });
}

function getUserLikedPosts(uId,posts){
    return posts.filter(function(post){
        var likes = post.likes || {data: []};
        return isLikedBy(likes.data,uId);
    });
}
// check if array of users has user id
function isLikedBy (likesArr,userId){
    return likesArr.filter(function(user){
        return user.id == userId;
    }).length;
}

},{"./settings":9,"./helper":2}],10:[function(require,module,exports){
var Services = require('../services');
var Storage = require('../helper').storage;

module.exports = {
    controller: function () {
        var error = m.prop('');
        var accessToken = Storage('accessToken');

        // check if Url Has token
        var params = Services.FB.getLoginUrlParams();

        if(params.accessToken){

            console.log('storeaccess');
            accessToken(params.accessToken); // store in local storage
            m.route('/albums');
        }
        else if (params.error){
            error(params.errorDescription) // show error
            console.log('tken error', params);
            // popup unable to Authenticate 
        }

        function openLoginDialogue(){
            var url = Services.FB.getLoginUrl();
            window.location.replace(url)
        }

        return {
            error: error,
            openLogin: openLoginDialogue
        }
    },

    view: function (ctrl) {
        var loginBtn = m('.btn-floating.waves-effect.waves-light.btn-large.blue', {onclick: ctrl.openLogin}, [
            m('i.fa.fa-facebook')
        ]);
        return m('.btn-fb-login',loginBtn)
    }
}

},{"../services":13,"../helper":2}],12:[function(require,module,exports){
var progressLoader = require('../components/progressLoader');
var photosComponent = require('../components/photos');
var Models = require('../models');
var Album = Models.Album;

module.exports = {

    controller: function(args) {
        args = args || {};

        var album = {
            id: args.id, // static
            name: m.prop(''),
            photos: m.prop([])
        };
        console.log('alll')
        var error = m.prop('');

        args.r = function(){
            console.log(args.id, 'child called')
        }

        var loadAlbum = function(id){
            Album.get(id)
            .then(function(iAlbum){

                album.name(iAlbum.name);
                return iAlbum.photos
            }).then(album.photos)//  set as img
            .then(function(photos){
                if(!photos.length) error( 'No photos were found');
                // console.log('redraw')
            }).then(m.redraw, function(e){
                // catch error
                console.log(e);
                error( 'No photos were found');
                m.redraw(true);
            });
        }
                m.redraw.strategy('none');

        loadAlbum(album.id);

        return {
            album: album,

            error: error
        }

    },
    view: function(ctrl,args) {
        var album = ctrl.album;
        console.log('state change',ctrl);
        return m('.album-modal', {class: "modal modal-fixed-footer", config:modalOpen}, [
            m('.modal-content',[
                m('h4', album.name()),
                function checkState(){
                    if (ctrl.error()) return errorView(ctrl.error());
                    // photos component
                    else if (album.photos().length) return m.component( photosComponent, {id: album.id, photos: album.photos()} );
                    // animated progress icon
                    else return m.component( progressLoader, {id: 'album-load-progress'} );
                }(),
            ]),
        ]);
    }
};
//
var modalOpen = function(el, isInit, ctx) {
    // ctx.retain = true;
    if (!isInit) {
        $(el).openModal();
    }
};
var errorView = function(error){
    return m('h2', error)
}

},{"../components/progressLoader":11,"../components/photos":15,"../models":14}],15:[function(require,module,exports){
var Models = require('../models');
var Storage = require('../helper').storage;
var userId = Storage('userId');
var Photo = Models.Photo;

module.exports = {
    controller: function (args) {

        var photos = {};

        // convert array to hash map
        var photosHash = args.photos.reduce(function(map, photo) { // does it call the last value

            map[photo.id] = {
                id: photo.id,
                description: photo.description,
                lgSrc: photo.lgSrc,
                thumbSrc: photo.thumbSrc,

                // non static variables
                likeCount: m.prop(photo.like.count),
                likedByUser: m.prop(isLikedBy(photo.like.users,userId()))
            };
            return map;
        }, {});

        // request like to be toggled
        function toggleLike(photo){
            var Liked = photosHash[photo.id].likedByUser;
            var likeCount = photosHash[photo.id].likeCount;

            Photo.toggleLike(photo)
            .then(Liked) // set value
            .then(function(like){
                if(like) likeCount(likeCount() + 1)
                else likeCount(likeCount() - 1)
            }).then(m.redraw);
        }

        return {
            listId: args.id,
            photosHash: photosHash,
            toggleLike: toggleLike
        }
    },

    view: function(ctrl){
        return m('.photos.row', [
            Object.keys(ctrl.photosHash).map(function(key){
                var photo = ctrl.photosHash[key];
                return photoCard(ctrl.listId, photo, ctrl.toggleLike)
            }),
        ]);
    }
}

// check if user id is in array
function isLikedBy (likesArr,userId){
    return likesArr.filter(function(user){
        return user.id == userId;
    }).length;
}

// // row columns
var photoCard = function(listId, photo, onLikeClick){
    console.log('rrr')
    return m('.col.s12.m6.l4',[
        m(".card.card-photo.hoverable", [
            m(".card-image.waves-effect.waves-block.waves-light", [
                m('a', { href: photo.lgSrc, 'data-lightbox': 'album-' + listId , 'data-title': photo.description }, [
                    m("img.responsive-img.image-load", { config: loadImage, src: photo.thumbSrc, style: { height: '320px' } } ),
                ]),
                m("a.btn-fb-like.btn-floating.waves-effect.waves-light.btn-large", { onclick: onLikeClick.bind(null,photo), class: photo.likedByUser() ? 'blue' : '' } , [
                    m("i.material-icons", "thumbs_up_down")
                ]),
                m('.chip.chip-likes', photo.likeCount() + ' Likes'),
                m("span.card-title", photo.description || '')
            ])
        ])
    ]);
}

// mithril config, when image loads add class
var loadImage = function (el,isInit,ctx) {
    ctx.retain = true;

    if(!isInit){
        $(el).load(function(){
            $(el).addClass('opacity-one');
        });
    }
}

},{"../models":14,"../helper":2}]},{},[1])
;